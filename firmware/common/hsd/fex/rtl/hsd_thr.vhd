-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hsd_thr is
generic (
    C_S_AXI_BUS_A_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_BUS_A_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    sync : IN STD_LOGIC;
    x0_V : IN STD_LOGIC_VECTOR (10 downto 0);
    x1_V : IN STD_LOGIC_VECTOR (10 downto 0);
    x2_V : IN STD_LOGIC_VECTOR (10 downto 0);
    x3_V : IN STD_LOGIC_VECTOR (10 downto 0);
    x4_V : IN STD_LOGIC_VECTOR (10 downto 0);
    x5_V : IN STD_LOGIC_VECTOR (10 downto 0);
    x6_V : IN STD_LOGIC_VECTOR (10 downto 0);
    x7_V : IN STD_LOGIC_VECTOR (10 downto 0);
    y0_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    y1_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    y2_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    y3_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    y4_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    y5_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    y6_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    y7_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    t0_V : OUT STD_LOGIC_VECTOR (13 downto 0);
    t1_V : OUT STD_LOGIC_VECTOR (13 downto 0);
    t2_V : OUT STD_LOGIC_VECTOR (13 downto 0);
    t3_V : OUT STD_LOGIC_VECTOR (13 downto 0);
    t4_V : OUT STD_LOGIC_VECTOR (13 downto 0);
    t5_V : OUT STD_LOGIC_VECTOR (13 downto 0);
    t6_V : OUT STD_LOGIC_VECTOR (13 downto 0);
    t7_V : OUT STD_LOGIC_VECTOR (13 downto 0);
    yv_V : OUT STD_LOGIC_VECTOR (3 downto 0);
    iy_V : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_axi_BUS_A_AWVALID : IN STD_LOGIC;
    s_axi_BUS_A_AWREADY : OUT STD_LOGIC;
    s_axi_BUS_A_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_A_ADDR_WIDTH-1 downto 0);
    s_axi_BUS_A_WVALID : IN STD_LOGIC;
    s_axi_BUS_A_WREADY : OUT STD_LOGIC;
    s_axi_BUS_A_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_A_DATA_WIDTH-1 downto 0);
    s_axi_BUS_A_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_A_DATA_WIDTH/8-1 downto 0);
    s_axi_BUS_A_ARVALID : IN STD_LOGIC;
    s_axi_BUS_A_ARREADY : OUT STD_LOGIC;
    s_axi_BUS_A_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_A_ADDR_WIDTH-1 downto 0);
    s_axi_BUS_A_RVALID : OUT STD_LOGIC;
    s_axi_BUS_A_RREADY : IN STD_LOGIC;
    s_axi_BUS_A_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_BUS_A_DATA_WIDTH-1 downto 0);
    s_axi_BUS_A_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_BUS_A_BVALID : OUT STD_LOGIC;
    s_axi_BUS_A_BREADY : IN STD_LOGIC;
    s_axi_BUS_A_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of hsd_thr is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hsd_thr,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku085-flvb1760-2-e,HLS_INPUT_CLOCK=5.400000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.700000,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=685,HLS_SYN_LUT=1248}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv14_2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_const_lv14_3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000011";
    constant ap_const_lv14_4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_const_lv14_5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000101";
    constant ap_const_lv14_6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000110";
    constant ap_const_lv14_7 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal config_a : STD_LOGIC_VECTOR (31 downto 0);
    signal config_b : STD_LOGIC_VECTOR (31 downto 0);
    signal config_c : STD_LOGIC_VECTOR (31 downto 0);
    signal config_d : STD_LOGIC_VECTOR (31 downto 0);
    signal count : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal waddr : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal raddr : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal akeep : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal xsave0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal xsave0_V_ce0 : STD_LOGIC;
    signal xsave0_V_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal xsave0_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal xsave0_V_ce1 : STD_LOGIC;
    signal xsave0_V_we1 : STD_LOGIC;
    signal xsave1_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal xsave1_V_ce0 : STD_LOGIC;
    signal xsave1_V_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal xsave1_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal xsave1_V_ce1 : STD_LOGIC;
    signal xsave1_V_we1 : STD_LOGIC;
    signal xsave2_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal xsave2_V_ce0 : STD_LOGIC;
    signal xsave2_V_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal xsave2_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal xsave2_V_ce1 : STD_LOGIC;
    signal xsave2_V_we1 : STD_LOGIC;
    signal xsave3_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal xsave3_V_ce0 : STD_LOGIC;
    signal xsave3_V_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal xsave3_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal xsave3_V_ce1 : STD_LOGIC;
    signal xsave3_V_we1 : STD_LOGIC;
    signal xsave4_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal xsave4_V_ce0 : STD_LOGIC;
    signal xsave4_V_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal xsave4_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal xsave4_V_ce1 : STD_LOGIC;
    signal xsave4_V_we1 : STD_LOGIC;
    signal xsave5_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal xsave5_V_ce0 : STD_LOGIC;
    signal xsave5_V_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal xsave5_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal xsave5_V_ce1 : STD_LOGIC;
    signal xsave5_V_we1 : STD_LOGIC;
    signal xsave6_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal xsave6_V_ce0 : STD_LOGIC;
    signal xsave6_V_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal xsave6_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal xsave6_V_ce1 : STD_LOGIC;
    signal xsave6_V_we1 : STD_LOGIC;
    signal xsave7_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal xsave7_V_ce0 : STD_LOGIC;
    signal xsave7_V_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal xsave7_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal xsave7_V_ce1 : STD_LOGIC;
    signal xsave7_V_we1 : STD_LOGIC;
    signal config_c_read_reg_1152 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal x7_V_read_reg_1158 : STD_LOGIC_VECTOR (10 downto 0);
    signal x6_V_read_reg_1163 : STD_LOGIC_VECTOR (10 downto 0);
    signal x5_V_read_reg_1168 : STD_LOGIC_VECTOR (10 downto 0);
    signal x4_V_read_reg_1173 : STD_LOGIC_VECTOR (10 downto 0);
    signal x3_V_read_reg_1178 : STD_LOGIC_VECTOR (10 downto 0);
    signal x2_V_read_reg_1183 : STD_LOGIC_VECTOR (10 downto 0);
    signal x1_V_read_reg_1188 : STD_LOGIC_VECTOR (10 downto 0);
    signal x0_V_read_reg_1193 : STD_LOGIC_VECTOR (10 downto 0);
    signal sync_read_reg_1198 : STD_LOGIC_VECTOR (0 downto 0);
    signal lkeep_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lkeep_reg_1204 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp15_fu_785_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp15_reg_1209 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_reg_1214 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_799_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_33_reg_1219 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_55_fu_807_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_55_reg_1224 : STD_LOGIC_VECTOR (3 downto 0);
    signal storemerge_fu_910_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal storemerge_reg_1229 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp0_iter2_storemerge_reg_1229 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_56_fu_972_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_56_reg_1234 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_pipeline_reg_pp0_iter2_tmp_56_reg_1234 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_57_reg_1239 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_984_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_58_reg_1244 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_60_fu_992_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_60_reg_1249 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal tmp_30_fu_945_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_fu_1043_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_count_assign_fu_839_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_fu_813_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_fu_998_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_1055_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal config_c_waddr_load_fu_559_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_567_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_583_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_599_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_615_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_631_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_647_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_663_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_679_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp7_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp11_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp10_fu_737_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp14_fu_761_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp13_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp12_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_fu_749_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_fu_773_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal config_c_waddr_load_fu_559_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_fu_803_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal count_assign_fu_829_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_867_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_871_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_877_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_883_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd_fu_863_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_890_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_894_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal akeep_loc_cast_fu_904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_and_t5_fu_925_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_t6_fu_932_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_and_f3_fu_918_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_938_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal akeep_loc_fu_898_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rcount_fu_967_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_raddr_load_fu_846_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_59_fu_988_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_and_t_fu_1023_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_t_fu_1030_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_and_f_fu_1016_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_fu_1036_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_idle_pp0 : STD_LOGIC;

    component hsd_thr_xsave0_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component hsd_thr_BUS_A_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        config_a : OUT STD_LOGIC_VECTOR (31 downto 0);
        config_b : OUT STD_LOGIC_VECTOR (31 downto 0);
        config_c : OUT STD_LOGIC_VECTOR (31 downto 0);
        config_d : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    xsave0_V_U : component hsd_thr_xsave0_V
    generic map (
        DataWidth => 11,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => xsave0_V_address0,
        ce0 => xsave0_V_ce0,
        q0 => xsave0_V_q0,
        address1 => xsave0_V_address1,
        ce1 => xsave0_V_ce1,
        we1 => xsave0_V_we1,
        d1 => x0_V_read_reg_1193);

    xsave1_V_U : component hsd_thr_xsave0_V
    generic map (
        DataWidth => 11,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => xsave1_V_address0,
        ce0 => xsave1_V_ce0,
        q0 => xsave1_V_q0,
        address1 => xsave1_V_address1,
        ce1 => xsave1_V_ce1,
        we1 => xsave1_V_we1,
        d1 => x1_V_read_reg_1188);

    xsave2_V_U : component hsd_thr_xsave0_V
    generic map (
        DataWidth => 11,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => xsave2_V_address0,
        ce0 => xsave2_V_ce0,
        q0 => xsave2_V_q0,
        address1 => xsave2_V_address1,
        ce1 => xsave2_V_ce1,
        we1 => xsave2_V_we1,
        d1 => x2_V_read_reg_1183);

    xsave3_V_U : component hsd_thr_xsave0_V
    generic map (
        DataWidth => 11,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => xsave3_V_address0,
        ce0 => xsave3_V_ce0,
        q0 => xsave3_V_q0,
        address1 => xsave3_V_address1,
        ce1 => xsave3_V_ce1,
        we1 => xsave3_V_we1,
        d1 => x3_V_read_reg_1178);

    xsave4_V_U : component hsd_thr_xsave0_V
    generic map (
        DataWidth => 11,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => xsave4_V_address0,
        ce0 => xsave4_V_ce0,
        q0 => xsave4_V_q0,
        address1 => xsave4_V_address1,
        ce1 => xsave4_V_ce1,
        we1 => xsave4_V_we1,
        d1 => x4_V_read_reg_1173);

    xsave5_V_U : component hsd_thr_xsave0_V
    generic map (
        DataWidth => 11,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => xsave5_V_address0,
        ce0 => xsave5_V_ce0,
        q0 => xsave5_V_q0,
        address1 => xsave5_V_address1,
        ce1 => xsave5_V_ce1,
        we1 => xsave5_V_we1,
        d1 => x5_V_read_reg_1168);

    xsave6_V_U : component hsd_thr_xsave0_V
    generic map (
        DataWidth => 11,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => xsave6_V_address0,
        ce0 => xsave6_V_ce0,
        q0 => xsave6_V_q0,
        address1 => xsave6_V_address1,
        ce1 => xsave6_V_ce1,
        we1 => xsave6_V_we1,
        d1 => x6_V_read_reg_1163);

    xsave7_V_U : component hsd_thr_xsave0_V
    generic map (
        DataWidth => 11,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => xsave7_V_address0,
        ce0 => xsave7_V_ce0,
        q0 => xsave7_V_q0,
        address1 => xsave7_V_address1,
        ce1 => xsave7_V_ce1,
        we1 => xsave7_V_we1,
        d1 => x7_V_read_reg_1158);

    hsd_thr_BUS_A_s_axi_U : component hsd_thr_BUS_A_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_BUS_A_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_BUS_A_DATA_WIDTH)
    port map (
        AWVALID => s_axi_BUS_A_AWVALID,
        AWREADY => s_axi_BUS_A_AWREADY,
        AWADDR => s_axi_BUS_A_AWADDR,
        WVALID => s_axi_BUS_A_WVALID,
        WREADY => s_axi_BUS_A_WREADY,
        WDATA => s_axi_BUS_A_WDATA,
        WSTRB => s_axi_BUS_A_WSTRB,
        ARVALID => s_axi_BUS_A_ARVALID,
        ARREADY => s_axi_BUS_A_ARREADY,
        ARADDR => s_axi_BUS_A_ARADDR,
        RVALID => s_axi_BUS_A_RVALID,
        RREADY => s_axi_BUS_A_RREADY,
        RDATA => s_axi_BUS_A_RDATA,
        RRESP => s_axi_BUS_A_RRESP,
        BVALID => s_axi_BUS_A_BVALID,
        BREADY => s_axi_BUS_A_BREADY,
        BRESP => s_axi_BUS_A_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        config_a => config_a,
        config_b => config_b,
        config_c => config_c,
        config_d => config_d);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then
                akeep <= akeep_loc_fu_898_p2(31 downto 1);
                count <= p_count_assign_fu_839_p3;
                raddr <= tmp_52_fu_998_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_const_boolean_1)) then
                    ap_pipeline_reg_pp0_iter2_storemerge_reg_1229(3) <= storemerge_reg_1229(3);
                ap_pipeline_reg_pp0_iter2_tmp_56_reg_1234 <= tmp_56_reg_1234;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1))) then
                config_c_read_reg_1152 <= config_c;
                lkeep_reg_1204 <= lkeep_fu_779_p2;
                    storemerge_reg_1229(3) <= storemerge_fu_910_p3(3);
                sync_read_reg_1198 <= (0=>sync, others=>'-');
                tmp15_reg_1209 <= tmp15_fu_785_p2;
                tmp_31_reg_1214 <= config_c_waddr_load_fu_559_p3(31 downto 31);
                tmp_33_reg_1219 <= tmp_33_fu_799_p1;
                tmp_55_reg_1224 <= tmp_55_fu_807_p2;
                tmp_56_reg_1234 <= tmp_56_fu_972_p1;
                tmp_57_reg_1239 <= p_raddr_load_fu_846_p3(31 downto 31);
                tmp_58_reg_1244 <= tmp_58_fu_984_p1;
                tmp_60_reg_1249 <= tmp_60_fu_992_p2;
                x0_V_read_reg_1193 <= x0_V;
                x1_V_read_reg_1188 <= x1_V;
                x2_V_read_reg_1183 <= x2_V;
                x3_V_read_reg_1178 <= x3_V;
                x4_V_read_reg_1173 <= x4_V;
                x5_V_read_reg_1168 <= x5_V;
                x6_V_read_reg_1163 <= x6_V;
                x7_V_read_reg_1158 <= x7_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and ap_const_boolean_1)) then
                waddr <= tmp_53_fu_813_p2;
            end if;
        end if;
    end process;
    storemerge_reg_1229(2 downto 0) <= "000";
    ap_pipeline_reg_pp0_iter2_storemerge_reg_1229(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_pipeline_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    akeep_loc_cast_fu_904_p2 <= (tmp_27_fu_890_p1 or tmp_28_fu_894_p1);
    akeep_loc_fu_898_p2 <= (extLd_fu_863_p1 or tmp_26_fu_883_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0 downto 0);
    ap_pipeline_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    config_c_waddr_load_fu_559_p0 <= (0=>sync, others=>'-');
    config_c_waddr_load_fu_559_p3 <= 
        config_c when (config_c_waddr_load_fu_559_p0(0) = '1') else 
        waddr;
    count_assign_fu_829_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(count));
        extLd_fu_863_p1 <= std_logic_vector(resize(signed(akeep),32));

    iy_V <= ap_const_lv3_0;
    lkeep_fu_779_p2 <= (tmp8_fu_773_p2 or tmp1_fu_731_p2);
    p_and_f3_fu_918_p3 <= (ap_const_lv28_0 & tmp_33_reg_1219);
    p_and_f_fu_1016_p3 <= (ap_const_lv28_0 & tmp_58_reg_1244);
    p_and_t5_fu_925_p3 <= (ap_const_lv28_0 & tmp_55_reg_1224);
    p_and_t_fu_1023_p3 <= (ap_const_lv28_0 & tmp_60_reg_1249);
    p_count_assign_fu_839_p3 <= 
        ap_const_lv32_0 when (sync_read_reg_1198(0) = '1') else 
        count_assign_fu_829_p2;
    p_neg_t6_fu_932_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_and_t5_fu_925_p3));
    p_neg_t_fu_1030_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_and_t_fu_1023_p3));
    p_raddr_load_fu_846_p3 <= 
        ap_const_lv32_0 when (sync_read_reg_1198(0) = '1') else 
        raddr;
    rcount_fu_967_p2 <= std_logic_vector(unsigned(p_count_assign_fu_839_p3) - unsigned(config_c_read_reg_1152));
    storemerge_fu_910_p3 <= 
        ap_const_lv4_8 when (akeep_loc_cast_fu_904_p2(0) = '1') else 
        ap_const_lv4_0;
    t0_V <= tmp_34_fu_1055_p3;
    t1_V <= (tmp_34_fu_1055_p3 or ap_const_lv14_1);
    t2_V <= (tmp_34_fu_1055_p3 or ap_const_lv14_2);
    t3_V <= (tmp_34_fu_1055_p3 or ap_const_lv14_3);
    t4_V <= (tmp_34_fu_1055_p3 or ap_const_lv14_4);
    t5_V <= (tmp_34_fu_1055_p3 or ap_const_lv14_5);
    t6_V <= (tmp_34_fu_1055_p3 or ap_const_lv14_6);
    t7_V <= (tmp_34_fu_1055_p3 or ap_const_lv14_7);
    tmp10_fu_737_p2 <= (tmp_13_fu_641_p2 or tmp_12_fu_635_p2);
    tmp11_fu_743_p2 <= (tmp_16_fu_657_p2 or tmp_15_fu_651_p2);
    tmp12_fu_767_p2 <= (tmp14_fu_761_p2 or tmp13_fu_755_p2);
    tmp13_fu_755_p2 <= (tmp_19_fu_673_p2 or tmp_18_fu_667_p2);
    tmp14_fu_761_p2 <= (tmp_22_fu_689_p2 or tmp_21_fu_683_p2);
    tmp15_fu_785_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(config_d));
    tmp1_fu_731_p2 <= (tmp5_fu_725_p2 or tmp2_fu_707_p2);
    tmp2_fu_707_p2 <= (tmp4_fu_701_p2 or tmp3_fu_695_p2);
    tmp3_fu_695_p2 <= (tmp_1_fu_571_p2 or tmp_2_fu_577_p2);
    tmp4_fu_701_p2 <= (tmp_6_fu_593_p2 or tmp_5_fu_587_p2);
    tmp5_fu_725_p2 <= (tmp7_fu_719_p2 or tmp6_fu_713_p2);
    tmp6_fu_713_p2 <= (tmp_3_fu_609_p2 or tmp_s_fu_603_p2);
    tmp7_fu_719_p2 <= (tmp_10_fu_625_p2 or tmp_8_fu_619_p2);
    tmp8_fu_773_p2 <= (tmp12_fu_767_p2 or tmp9_fu_749_p2);
    tmp9_fu_749_p2 <= (tmp11_fu_743_p2 or tmp10_fu_737_p2);
    tmp_10_fu_625_p2 <= "1" when (unsigned(tmp_7_fu_615_p1) > unsigned(config_b)) else "0";
        tmp_11_fu_631_p1 <= std_logic_vector(resize(signed(x4_V),32));

    tmp_12_fu_635_p2 <= "1" when (unsigned(tmp_11_fu_631_p1) < unsigned(config_a)) else "0";
    tmp_13_fu_641_p2 <= "1" when (unsigned(tmp_11_fu_631_p1) > unsigned(config_b)) else "0";
        tmp_14_fu_647_p1 <= std_logic_vector(resize(signed(x5_V),32));

    tmp_15_fu_651_p2 <= "1" when (unsigned(tmp_14_fu_647_p1) < unsigned(config_a)) else "0";
    tmp_16_fu_657_p2 <= "1" when (unsigned(tmp_14_fu_647_p1) > unsigned(config_b)) else "0";
        tmp_17_fu_663_p1 <= std_logic_vector(resize(signed(x6_V),32));

    tmp_18_fu_667_p2 <= "1" when (unsigned(tmp_17_fu_663_p1) < unsigned(config_a)) else "0";
    tmp_19_fu_673_p2 <= "1" when (unsigned(tmp_17_fu_663_p1) > unsigned(config_b)) else "0";
    tmp_1_fu_571_p2 <= "1" when (unsigned(tmp_fu_567_p1) < unsigned(config_a)) else "0";
        tmp_20_fu_679_p1 <= std_logic_vector(resize(signed(x7_V),32));

    tmp_21_fu_683_p2 <= "1" when (unsigned(tmp_20_fu_679_p1) < unsigned(config_a)) else "0";
    tmp_22_fu_689_p2 <= "1" when (unsigned(tmp_20_fu_679_p1) > unsigned(config_b)) else "0";
    tmp_23_fu_867_p2 <= std_logic_vector(unsigned(config_c_read_reg_1152) + unsigned(tmp15_reg_1209));
    tmp_24_fu_871_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(tmp_23_fu_867_p2));
    tmp_25_fu_877_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & tmp_24_fu_871_p2(31-1 downto 0)))));
    tmp_26_fu_883_p3 <= 
        tmp_25_fu_877_p2 when (lkeep_reg_1204(0) = '1') else 
        ap_const_lv32_0;
    tmp_27_fu_890_p1 <= akeep(1 - 1 downto 0);
    tmp_28_fu_894_p1 <= tmp_26_fu_883_p3(1 - 1 downto 0);
    tmp_29_fu_938_p3 <= 
        p_neg_t6_fu_932_p2 when (tmp_31_reg_1214(0) = '1') else 
        p_and_f3_fu_918_p3;
    tmp_2_fu_577_p2 <= "1" when (unsigned(tmp_fu_567_p1) > unsigned(config_b)) else "0";
        tmp_30_fu_945_p1 <= std_logic_vector(resize(signed(tmp_29_fu_938_p3),64));

    tmp_33_fu_799_p1 <= config_c_waddr_load_fu_559_p3(4 - 1 downto 0);
    tmp_34_fu_1055_p3 <= (ap_pipeline_reg_pp0_iter2_tmp_56_reg_1234 & ap_const_lv3_0);
    tmp_3_fu_609_p2 <= "1" when (unsigned(tmp_9_fu_599_p1) > unsigned(config_b)) else "0";
    tmp_42_fu_1036_p3 <= 
        p_neg_t_fu_1030_p2 when (tmp_57_reg_1239(0) = '1') else 
        p_and_f_fu_1016_p3;
        tmp_43_fu_1043_p1 <= std_logic_vector(resize(signed(tmp_42_fu_1036_p3),64));

        tmp_4_fu_583_p1 <= std_logic_vector(resize(signed(x1_V),32));

    tmp_52_fu_998_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_raddr_load_fu_846_p3));
    tmp_53_fu_813_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(config_c_waddr_load_fu_559_p3));
    tmp_54_fu_803_p1 <= config_c_waddr_load_fu_559_p3(4 - 1 downto 0);
    tmp_55_fu_807_p2 <= std_logic_vector(unsigned(ap_const_lv4_0) - unsigned(tmp_54_fu_803_p1));
    tmp_56_fu_972_p1 <= rcount_fu_967_p2(11 - 1 downto 0);
    tmp_58_fu_984_p1 <= p_raddr_load_fu_846_p3(4 - 1 downto 0);
    tmp_59_fu_988_p1 <= p_raddr_load_fu_846_p3(4 - 1 downto 0);
    tmp_5_fu_587_p2 <= "1" when (unsigned(tmp_4_fu_583_p1) < unsigned(config_a)) else "0";
    tmp_60_fu_992_p2 <= std_logic_vector(unsigned(ap_const_lv4_0) - unsigned(tmp_59_fu_988_p1));
    tmp_6_fu_593_p2 <= "1" when (unsigned(tmp_4_fu_583_p1) > unsigned(config_b)) else "0";
        tmp_7_fu_615_p1 <= std_logic_vector(resize(signed(x3_V),32));

    tmp_8_fu_619_p2 <= "1" when (unsigned(tmp_7_fu_615_p1) < unsigned(config_a)) else "0";
        tmp_9_fu_599_p1 <= std_logic_vector(resize(signed(x2_V),32));

        tmp_fu_567_p1 <= std_logic_vector(resize(signed(x0_V),32));

    tmp_s_fu_603_p2 <= "1" when (unsigned(tmp_9_fu_599_p1) < unsigned(config_a)) else "0";
    xsave0_V_address0 <= tmp_43_fu_1043_p1(4 - 1 downto 0);
    xsave0_V_address1 <= tmp_30_fu_945_p1(4 - 1 downto 0);

    xsave0_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter2)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter2)) then 
            xsave0_V_ce0 <= ap_const_logic_1;
        else 
            xsave0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xsave0_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            xsave0_V_ce1 <= ap_const_logic_1;
        else 
            xsave0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    xsave0_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            xsave0_V_we1 <= ap_const_logic_1;
        else 
            xsave0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    xsave1_V_address0 <= tmp_43_fu_1043_p1(4 - 1 downto 0);
    xsave1_V_address1 <= tmp_30_fu_945_p1(4 - 1 downto 0);

    xsave1_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter2)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter2)) then 
            xsave1_V_ce0 <= ap_const_logic_1;
        else 
            xsave1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xsave1_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            xsave1_V_ce1 <= ap_const_logic_1;
        else 
            xsave1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    xsave1_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            xsave1_V_we1 <= ap_const_logic_1;
        else 
            xsave1_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    xsave2_V_address0 <= tmp_43_fu_1043_p1(4 - 1 downto 0);
    xsave2_V_address1 <= tmp_30_fu_945_p1(4 - 1 downto 0);

    xsave2_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter2)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter2)) then 
            xsave2_V_ce0 <= ap_const_logic_1;
        else 
            xsave2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xsave2_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            xsave2_V_ce1 <= ap_const_logic_1;
        else 
            xsave2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    xsave2_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            xsave2_V_we1 <= ap_const_logic_1;
        else 
            xsave2_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    xsave3_V_address0 <= tmp_43_fu_1043_p1(4 - 1 downto 0);
    xsave3_V_address1 <= tmp_30_fu_945_p1(4 - 1 downto 0);

    xsave3_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter2)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter2)) then 
            xsave3_V_ce0 <= ap_const_logic_1;
        else 
            xsave3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xsave3_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            xsave3_V_ce1 <= ap_const_logic_1;
        else 
            xsave3_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    xsave3_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            xsave3_V_we1 <= ap_const_logic_1;
        else 
            xsave3_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    xsave4_V_address0 <= tmp_43_fu_1043_p1(4 - 1 downto 0);
    xsave4_V_address1 <= tmp_30_fu_945_p1(4 - 1 downto 0);

    xsave4_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter2)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter2)) then 
            xsave4_V_ce0 <= ap_const_logic_1;
        else 
            xsave4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xsave4_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            xsave4_V_ce1 <= ap_const_logic_1;
        else 
            xsave4_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    xsave4_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            xsave4_V_we1 <= ap_const_logic_1;
        else 
            xsave4_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    xsave5_V_address0 <= tmp_43_fu_1043_p1(4 - 1 downto 0);
    xsave5_V_address1 <= tmp_30_fu_945_p1(4 - 1 downto 0);

    xsave5_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter2)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter2)) then 
            xsave5_V_ce0 <= ap_const_logic_1;
        else 
            xsave5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xsave5_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            xsave5_V_ce1 <= ap_const_logic_1;
        else 
            xsave5_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    xsave5_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            xsave5_V_we1 <= ap_const_logic_1;
        else 
            xsave5_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    xsave6_V_address0 <= tmp_43_fu_1043_p1(4 - 1 downto 0);
    xsave6_V_address1 <= tmp_30_fu_945_p1(4 - 1 downto 0);

    xsave6_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter2)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter2)) then 
            xsave6_V_ce0 <= ap_const_logic_1;
        else 
            xsave6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xsave6_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            xsave6_V_ce1 <= ap_const_logic_1;
        else 
            xsave6_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    xsave6_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            xsave6_V_we1 <= ap_const_logic_1;
        else 
            xsave6_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    xsave7_V_address0 <= tmp_43_fu_1043_p1(4 - 1 downto 0);
    xsave7_V_address1 <= tmp_30_fu_945_p1(4 - 1 downto 0);

    xsave7_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter2)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter2)) then 
            xsave7_V_ce0 <= ap_const_logic_1;
        else 
            xsave7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xsave7_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            xsave7_V_ce1 <= ap_const_logic_1;
        else 
            xsave7_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    xsave7_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            xsave7_V_we1 <= ap_const_logic_1;
        else 
            xsave7_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

        y0_V <= std_logic_vector(resize(signed(xsave0_V_q0),16));

        y1_V <= std_logic_vector(resize(signed(xsave1_V_q0),16));

        y2_V <= std_logic_vector(resize(signed(xsave2_V_q0),16));

        y3_V <= std_logic_vector(resize(signed(xsave3_V_q0),16));

        y4_V <= std_logic_vector(resize(signed(xsave4_V_q0),16));

        y5_V <= std_logic_vector(resize(signed(xsave5_V_q0),16));

        y6_V <= std_logic_vector(resize(signed(xsave6_V_q0),16));

        y7_V <= std_logic_vector(resize(signed(xsave7_V_q0),16));

    yv_V <= ap_pipeline_reg_pp0_iter2_storemerge_reg_1229;
end behav;
